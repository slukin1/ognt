"use strict";
var __awaiter = (this && this.__awaiter) || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NearMobileSignerProxy = void 0;
const config_1 = __importDefault(require("../../common/config/config"));
const polling_1 = __importDefault(require("../../common/utils/polling"));
const SignerRequestStatus_1 = require("../../data-access/api/models/models/SignerRequestStatus");
const service_1 = require("../../data-access/api/service");
class NearMobileSignerProxy {
    createRequest(network, request, metadata) {
        return __awaiter(this, void 0, void 0, function*() {
            const signerRequest = yield service_1.SignerRequestApi.createSignerRequest({
                network,
                transactions: request,
                dAppMetadata: metadata
            });
            return signerRequest;
        });
    }
    awaitActionSignatureResolution(id) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield(0, polling_1.default)(() => service_1.SignerRequestApi.getSignerRequestStatus(id), ({
                status
            }) => status === SignerRequestStatus_1.SignerRequestStatus.PENDING, {
                maxIterations: config_1.default.polling.maxIterations,
            });
        });
    }
    getRequest(id) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield service_1.SignerRequestApi.getSignerRequest(id);
        });
    }
    createSignMessage(network, message, receiver, nonce, callbackUrl, metadata) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield service_1.SignerRequestApi.createSignMessageRequest({
                network,
                message,
                receiver,
                nonce,
                callbackUrl,
                receiverMetadata: metadata,
            });
        });
    }
    awaitMessageSignatureResolution(id) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield(0, polling_1.default)(() => service_1.SignerRequestApi.getSignMessageRequest(id), ({
                response,
                status
            }) => !response && status === SignerRequestStatus_1.SignerRequestStatus.PENDING, {
                maxIterations: config_1.default.polling.maxIterations,
            });
        });
    }
    rejectSignerRequest(id) {
        return __awaiter(this, void 0, void 0, function*() {
            yield service_1.SignerRequestApi.rejectSignerRequest(id);
        });
    }
}
exports.NearMobileSignerProxy = NearMobileSignerProxy;