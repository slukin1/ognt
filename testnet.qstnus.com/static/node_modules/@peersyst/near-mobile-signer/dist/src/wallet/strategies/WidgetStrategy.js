"use strict";
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WidgetStrategy = void 0;
const config_1 = __importDefault(require("../../common/config/config"));
const createIframe = (widget) => {
    const connector = document.createElement("iframe");
    connector.src = widget;
    connector.style.border = "none";
    connector.style.zIndex = "10000";
    connector.style.position = "fixed";
    connector.style.display = "none";
    connector.style.top = "0";
    connector.style.left = "0";
    connector.style.width = "100%";
    connector.style.height = "100%";
    document.body.appendChild(connector);
    return connector;
};
class WidgetStrategy {
    constructor() {
        this.widgetUrl = config_1.default.widgetUrl;
        if (WidgetStrategy.connector == null) {
            WidgetStrategy.connector = createIframe(this.widgetUrl);
            WidgetStrategy.connector.addEventListener("load", () => {
                WidgetStrategy.isLoaded = true;
            });
        }
    }
    close() {
        if (this.messageHandler) {
            window.removeEventListener("message", this.messageHandler);
            this.messageHandler = undefined;
        }
        if (WidgetStrategy.connector != null) {
            WidgetStrategy.connector.style.display = "none";
        }
    }
    onRequested(id, request, onClose) {
        if (WidgetStrategy.connector == null)
            return;
        WidgetStrategy.connector.style.display = "block";
        const loadHandler = () => {
            var _a, _b;
            WidgetStrategy.connector.removeEventListener("load", loadHandler);
            const requestType = "message" in request ? "message" : "request";
            const requestUrl = `${config_1.default.nearMobileWalletUrl}/${requestType}/${id}`;
            (_b = (_a = WidgetStrategy.connector) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage({
                requestUrl,
                isNearMobile: !!window.isNearMobile
            }, new URL(this.widgetUrl).origin);
        };
        if (WidgetStrategy.isLoaded)
            loadHandler();
        else
            WidgetStrategy.connector.addEventListener("load", loadHandler);
        this.messageHandler = (event) => {
            if (event.origin !== new URL(this.widgetUrl).origin)
                return;
            if (event.data === "close") {
                onClose === null || onClose === void 0 ? void 0 : onClose();
                this.onError();
            }
        };
        window.addEventListener("message", this.messageHandler);
    }
    onApproved() {
        this.close();
    }
    onSuccess() {
        this.close();
    }
    onError() {
        this.close();
    }
}
exports.WidgetStrategy = WidgetStrategy;
WidgetStrategy.isLoaded = false;