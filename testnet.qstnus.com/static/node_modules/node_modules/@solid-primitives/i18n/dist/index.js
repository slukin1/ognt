import {
    createContext,
    createSignal,
    useContext
} from 'solid-js';
import {
    createStore
} from 'solid-js/store';

// src/index.ts
var deepReadObject = (obj, path, defaultValue) => {
    const value = path.trim().split(".").reduce((a, b) => a ? a[b] : void 0, obj);
    return value !== void 0 ? value : defaultValue;
};
var template = (str, params, reg = /{{(.*?)}}/g) => str.replace(reg, (_, key) => deepReadObject(params, key, ""));
var createI18nContext = (init = {}, lang = navigator.language in init ? navigator.language : Object.keys(init)[0]) => {
    const [locale, setLocale] = createSignal(lang);
    const [dict, setDict] = createStore(init);
    const translate = (key, params, defaultValue) => {
        const val = deepReadObject(dict[locale()], key, defaultValue || "");
        if (typeof val === "function")
            return val(params);
        if (typeof val === "string")
            return template(val, params || {});
        return val;
    };
    const actions = {
        add(lang2, table) {
            setDict(lang2, (t) => Object.assign(t || {}, table));
        },
        locale: (lang2) => lang2 ? setLocale(lang2) : locale(),
        dict: (lang2) => deepReadObject(dict, lang2)
    };
    return [translate, actions];
};
var I18nContext = createContext({});
var useI18n = () => useContext(I18nContext);

export {
    I18nContext,
    createI18nContext,
    useI18n
};